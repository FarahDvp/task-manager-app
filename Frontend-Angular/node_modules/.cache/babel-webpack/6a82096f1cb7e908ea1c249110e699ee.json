{"ast":null,"code":"import _asyncToGenerator from \"/home/mohamedhabaieb/IsammSpring/GitLab_Devops_Spring/devops/GestionDeTachesFront/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!raw-loader!./login.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./login.component.css\";\nimport { Component } from '@angular/core';\nimport { Router } from \"@angular/router\";\nimport { TokenStorageService } from \"../../Services/Security/token-storage.service\";\nimport { FormControlerService } from \"../../Services/form-controles.service\";\nimport { AuthServerService } from \"../../Services/Security/auth-server.service\";\nimport { Login } from \"../../Models/login\";\nimport { FormControl, FormGroup } from \"@angular/forms\";\nlet LoginComponent = class LoginComponent {\n  constructor(formService, router, authService, tokenStorage) {\n    this.formService = formService;\n    this.router = router;\n    this.authService = authService;\n    this.tokenStorage = tokenStorage;\n    this.role = this.tokenStorage.getRole();\n    this.login = new Login();\n    this.showsuccessmessage = false;\n    this.showerrormessage = false;\n  }\n\n  ngOnInit() {\n    this.showsuccessmessage = false;\n    this.showerrormessage = false;\n  }\n\n  validateAllFormFields(formGroup) {\n    Object.keys(formGroup.controls).forEach(field => {\n      const control = formGroup.get(field);\n\n      if (control instanceof FormControl) {\n        control.markAsTouched({\n          onlySelf: true\n        });\n      } else if (control instanceof FormGroup) {\n        this.validateAllFormFields(control);\n      }\n    });\n  }\n\n  onSubmit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this.formService.formGroupLogin.valid) {\n        _this.login.userName = _this.formService.formGroupLogin.value.username;\n        _this.login.password = _this.formService.formGroupLogin.value.password;\n        console.log('login :', _this.login);\n\n        _this.authService.login(_this.login).subscribe(data => {\n          console.log('data :', data);\n          _this.showerrormessage = false;\n          _this.showsuccessmessage = true;\n\n          _this.tokenStorage.savedata(data);\n\n          if (localStorage.getItem('role-user') === 'user') {\n            console.log('role user:', data.role);\n\n            _this.router.navigateByUrl('homeUser/DashbordUser');\n          } else if (localStorage.getItem('role-user') === 'admin') {\n            console.log('role admin:', data.role);\n\n            _this.router.navigateByUrl('homeAdmin/DashbordAdmin');\n          }\n\n          _this.onClear();\n        }, error => {\n          console.log('error :', error);\n          _this.showerrormessage = true;\n          _this.showsuccessmessage = false;\n          setTimeout(() => {\n            _this.showerrormessage = false;\n          }, 2000);\n        });\n      } else {\n        _this.validateAllFormFields(_this.formService.formGroupLogin);\n      }\n    })();\n  }\n\n  onClear() {\n    this.formService.formGroupLogin.reset();\n  }\n\n};\n\nLoginComponent.ctorParameters = () => [{\n  type: FormControlerService\n}, {\n  type: Router\n}, {\n  type: AuthServerService\n}, {\n  type: TokenStorageService\n}];\n\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], LoginComponent);\nexport { LoginComponent };","map":{"version":3,"sources":["/home/mohamedhabaieb/IsammSpring/GitLab_Devops_Spring/devops/GestionDeTachesFront/src/app/Components/login/login.component.ts"],"names":[],"mappings":"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","sourcesContent":["import {Component, ElementRef, OnInit} from '@angular/core';\nimport {Router} from \"@angular/router\";\nimport {TokenStorageService} from \"../../Services/Security/token-storage.service\";\nimport {FormControlerService} from \"../../Services/form-controles.service\";\nimport {AuthServerService} from \"../../Services/Security/auth-server.service\";\nimport {Login} from \"../../Models/login\";\nimport {FormControl, FormGroup} from \"@angular/forms\";\nimport {async} from \"rxjs\";\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n  role= this.tokenStorage.getRole();\n  login :Login = new Login();\n  showsuccessmessage: boolean=false;\n  showerrormessage: boolean=false;\n  constructor(public formService :FormControlerService,\n              private router:Router,\n              private authService :AuthServerService,\n              private tokenStorage :TokenStorageService) { }\n\n  ngOnInit(): void {\n    this.showsuccessmessage = false;\n    this.showerrormessage = false;\n  }\n  validateAllFormFields(formGroup: FormGroup) {\n    Object.keys(formGroup.controls).forEach(field => {\n      const control = formGroup.get(field);\n      if (control instanceof FormControl) {\n        control.markAsTouched({ onlySelf: true });\n      } else if (control instanceof FormGroup) {\n        this.validateAllFormFields(control);\n      }\n    } );\n  }\n  async onSubmit() {\n    if (this.formService.formGroupLogin.valid) {\n      this.login.userName = this.formService.formGroupLogin.value.username;\n      this.login.password = this.formService.formGroupLogin.value.password;\n\n      console.log('login :', this.login);\n\n      this.authService.login(this.login).subscribe(\n        (data: any) => {\n          console.log('data :', data);\n          this.showerrormessage = false;\n          this.showsuccessmessage = true;\n          this.tokenStorage.savedata(data);\n\n          if (localStorage.getItem('role-user') === 'user') {\n            console.log('role user:', data.role);\n            this.router.navigateByUrl('homeUser/DashbordUser');\n          } else if (localStorage.getItem('role-user') === 'admin') {\n            console.log('role admin:', data.role);\n            this.router.navigateByUrl('homeAdmin/DashbordAdmin');\n          }\n\n          this.onClear();\n        },\n        (error) => {\n          console.log('error :', error);\n          this.showerrormessage = true;\n          this.showsuccessmessage = false;\n          setTimeout(() => {\n            this.showerrormessage = false;\n          }, 2000);\n        }\n      );\n    } else {\n      this.validateAllFormFields(this.formService.formGroupLogin);\n    }\n  }\n\n\n  onClear() {\n    this.formService.formGroupLogin.reset();\n  }\n\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}